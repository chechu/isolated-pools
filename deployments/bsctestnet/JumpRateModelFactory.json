{
  "address": "0x5C363129Fbc5C8426cA23B181a23024FA83b5234",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseRatePerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "jumpMultiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kink_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "contract JumpRateModelV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e96b3bdc2fbe0caf49981acfb4e621e08ac3fb633d03e75410e6aa93746d4c6",
  "receipt": {
    "to": null,
    "from": "0x8BDA9f9E1fEF0DFd404Fef338D9fE4c543d172e1",
    "contractAddress": "0x5C363129Fbc5C8426cA23B181a23024FA83b5234",
    "transactionIndex": 0,
    "gasUsed": "542614",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x4d61d7a938476720c4528e93a4fccfecdaa3f938fa04ba6fdbc67e8480f04dd8",
    "transactionHash": "0x1e96b3bdc2fbe0caf49981acfb4e621e08ac3fb633d03e75410e6aa93746d4c6",
    "logs": [],
    "blockNumber": 27434831,
    "cumulativeGasUsed": "542614",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6e56fddf756318c4a86c8f359f7cd8f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract JumpRateModelV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factories/JumpRateModelFactory.sol\":\"JumpRateModelFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BaseJumpRateModelV2.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Logic for Compound's JumpRateModel Contract V2.\\n * @author Compound (modified by Dharma Labs, refactored by Arr00)\\n * @notice Version 2 modifies Version 1 by enabling updateable parameters.\\n */\\nabstract contract BaseJumpRateModelV2 is InterestRateModel {\\n    uint256 private constant BASE = 1e18;\\n\\n    /**\\n     * @notice The address of the owner, i.e. the Timelock contract, which can update parameters directly\\n     */\\n    address public owner;\\n\\n    /**\\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\\n     */\\n    uint256 public constant blocksPerYear = 2102400;\\n\\n    /**\\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\\n     */\\n    uint256 public multiplierPerBlock;\\n\\n    /**\\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\\n     */\\n    uint256 public baseRatePerBlock;\\n\\n    /**\\n     * @notice The multiplierPerBlock after hitting a specified utilization point\\n     */\\n    uint256 public jumpMultiplierPerBlock;\\n\\n    /**\\n     * @notice The utilization point at which the jump multiplier is applied\\n     */\\n    uint256 public kink;\\n\\n    event NewInterestParams(\\n        uint256 baseRatePerBlock,\\n        uint256 multiplierPerBlock,\\n        uint256 jumpMultiplierPerBlock,\\n        uint256 kink\\n    );\\n\\n    /**\\n     * @notice Construct an interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     * @param owner_ The address of the owner, i.e. the Timelock contract (which has the ability to update parameters directly)\\n     */\\n    constructor(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_,\\n        address owner_\\n    ) {\\n        require(owner_ != address(0), \\\"invalid owner address\\\");\\n\\n        owner = owner_;\\n\\n        updateJumpRateModelInternal(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\\n    }\\n\\n    /**\\n     * @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     */\\n    function updateJumpRateModel(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_\\n    ) external virtual {\\n        require(msg.sender == owner, \\\"only the owner may call this function.\\\");\\n\\n        updateJumpRateModelInternal(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\\n    }\\n\\n    /**\\n     * @notice Calculates the current supply rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @param reserveFactorMantissa The current reserve factor for the market\\n     * @return The supply rate percentage per block as a mantissa (scaled by BASE)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) public view virtual override returns (uint256) {\\n        uint256 oneMinusReserveFactor = BASE - reserveFactorMantissa;\\n        uint256 borrowRate = getBorrowRateInternal(cash, borrows, reserves);\\n        uint256 rateToPool = (borrowRate * oneMinusReserveFactor) / BASE;\\n        return (utilizationRate(cash, borrows, reserves) * rateToPool) / BASE;\\n    }\\n\\n    /**\\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market (currently unused)\\n     * @return The utilization rate as a mantissa between [0, BASE]\\n     */\\n    function utilizationRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) public pure returns (uint256) {\\n        // Utilization rate is 0 when there are no borrows\\n        if (borrows == 0) {\\n            return 0;\\n        }\\n\\n        return (borrows * BASE) / (cash + borrows - reserves);\\n    }\\n\\n    /**\\n     * @notice Internal function to update the parameters of the interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by BASE)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by BASE)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     */\\n    function updateJumpRateModelInternal(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_\\n    ) internal {\\n        baseRatePerBlock = baseRatePerYear / blocksPerYear;\\n        multiplierPerBlock = (multiplierPerYear * BASE) / (blocksPerYear * kink_);\\n        jumpMultiplierPerBlock = jumpMultiplierPerYear / blocksPerYear;\\n        kink = kink_;\\n\\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\\n    }\\n\\n    /**\\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by BASE)\\n     */\\n    function getBorrowRateInternal(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) internal view returns (uint256) {\\n        uint256 util = utilizationRate(cash, borrows, reserves);\\n\\n        if (util <= kink) {\\n            return ((util * multiplierPerBlock) / BASE) + baseRatePerBlock;\\n        } else {\\n            uint256 normalRate = ((kink * multiplierPerBlock) / BASE) + baseRatePerBlock;\\n            uint256 excessUtil;\\n            unchecked {\\n                excessUtil = util - kink;\\n            }\\n            return ((excessUtil * jumpMultiplierPerBlock) / BASE) + normalRate;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a3e825e17d8067e96ec6124f6db8e8a5035cd35f957f93b6f1a048c274e304f\",\"license\":\"BSD-3-Clause\"},\"contracts/Factories/JumpRateModelFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"../JumpRateModelV2.sol\\\";\\n\\ncontract JumpRateModelFactory {\\n    function deploy(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_,\\n        address owner_\\n    ) external returns (JumpRateModelV2) {\\n        JumpRateModelV2 rate = new JumpRateModelV2(\\n            baseRatePerYear,\\n            multiplierPerYear,\\n            jumpMultiplierPerYear,\\n            kink_,\\n            owner_\\n        );\\n\\n        return rate;\\n    }\\n}\\n\",\"keccak256\":\"0x7f7e9bfd997dbb89de22ebe914db5c6f03bdc8e6e66076b7d6028956102837ac\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x574f726b1806c3ca7323b5b4c0fa2da440c733cb07d62f7f160cf9d305a87d14\",\"license\":\"BSD-3-Clause\"},\"contracts/JumpRateModelV2.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"./BaseJumpRateModelV2.sol\\\";\\n\\n/**\\n * @title Compound's JumpRateModel Contract V2 for V2 vTokens\\n * @author Arr00\\n * @notice Supports only for V2 vTokens\\n */\\ncontract JumpRateModelV2 is BaseJumpRateModelV2 {\\n    constructor(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_,\\n        address owner_\\n    ) BaseJumpRateModelV2(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_, owner_) {}\\n\\n    /**\\n     * @notice Calculates the current borrow rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view override returns (uint256) {\\n        return getBorrowRateInternal(cash, borrows, reserves);\\n    }\\n}\\n\",\"keccak256\":\"0xc75b4ea5d96427598bbac1d1c0d346e1044c9aba4149833578475aaab4559458\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506108de806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cccfa36114610030575b600080fd5b61004361003e3660046100d1565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000808686868686604051610073906100c4565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a001604051809103906000f0801580156100b8573d6000803e3d6000fd5b50979650505050505050565b61077e8061012b83390190565b600080600080600060a086880312156100e957600080fd5b8535945060208601359350604086013592506060860135915060808601356001600160a01b038116811461011c57600080fd5b80915050929550929590935056fe608060405234801561001057600080fd5b5060405161077e38038061077e83398101604081905261002f9161016c565b84848484846001600160a01b03811661008e5760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964206f776e657220616464726573730000000000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0383161790556100b5858585856100c4565b50505050505050505050610216565b6100d162201480856101c7565b6002556100e181622014806101e9565b6100f3670de0b6b3a7640000856101e9565b6100fd91906101c7565b60015561010d62201480836101c7565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b600080600080600060a0868803121561018457600080fd5b855160208701516040880151606089015160808a0151939850919650945092506001600160a01b03811681146101b957600080fd5b809150509295509295909350565b6000826101e457634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561021157634e487b7160e01b600052601160045260246000fd5b500290565b610559806102256000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b1461011d578063a385fb9614610148578063b816881614610152578063b9f9850a14610165578063f14039de1461016e578063fd2da3391461017757600080fd5b806315f24053146100ae5780632037f3e7146100d45780632191f92a146100e95780636e71e2d8146101015780638726bb8914610114575b600080fd5b6100c16100bc36600461043f565b610180565b6040519081526020015b60405180910390f35b6100e76100e236600461046b565b610197565b005b6100f1600181565b60405190151581526020016100cb565b6100c161010f36600461043f565b610216565b6100c160015481565b600054610130906001600160a01b031681565b6040516001600160a01b0390911681526020016100cb565b6100c16220148081565b6100c161016036600461046b565b610259565b6100c160035481565b6100c160025481565b6100c160045481565b600061018d8484846102d5565b90505b9392505050565b6000546001600160a01b031633146102045760405162461bcd60e51b815260206004820152602660248201527f6f6e6c7920746865206f776e6572206d61792063616c6c20746869732066756e60448201526531ba34b7b71760d11b606482015260840160405180910390fd5b61021084848484610397565b50505050565b60008260000361022857506000610190565b8161023384866104b3565b61023d91906104cb565b61024f670de0b6b3a7640000856104e2565b61018d9190610501565b60008061026e83670de0b6b3a76400006104cb565b9050600061027d8787876102d5565b90506000670de0b6b3a764000061029484846104e2565b61029e9190610501565b9050670de0b6b3a7640000816102b58a8a8a610216565b6102bf91906104e2565b6102c99190610501565b98975050505050505050565b6000806102e3858585610216565b9050600454811161032457600254670de0b6b3a76400006001548361030891906104e2565b6103129190610501565b61031c91906104b3565b915050610190565b6000600254670de0b6b3a764000060015460045461034291906104e2565b61034c9190610501565b61035691906104b3565b905060006004548303905081670de0b6b3a76400006003548361037991906104e2565b6103839190610501565b61038d91906104b3565b9350505050610190565b6103a46220148085610501565b6002556103b481622014806104e2565b6103c6670de0b6b3a7640000856104e2565b6103d09190610501565b6001556103e06220148083610501565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b60008060006060848603121561045457600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561048157600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b600082198211156104c6576104c661049d565b500190565b6000828210156104dd576104dd61049d565b500390565b60008160001904831182151516156104fc576104fc61049d565b500290565b60008261051e57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122007d010deba7fe64eb6715c8b9df06a6025ea3429d04efb27bb2c0276bff69c4464736f6c634300080d0033a2646970667358221220470aadbedd72ebf747df2e9edac1b2ffedf408f8067f2e1ede8f06952079d9e964736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cccfa36114610030575b600080fd5b61004361003e3660046100d1565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000808686868686604051610073906100c4565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a001604051809103906000f0801580156100b8573d6000803e3d6000fd5b50979650505050505050565b61077e8061012b83390190565b600080600080600060a086880312156100e957600080fd5b8535945060208601359350604086013592506060860135915060808601356001600160a01b038116811461011c57600080fd5b80915050929550929590935056fe608060405234801561001057600080fd5b5060405161077e38038061077e83398101604081905261002f9161016c565b84848484846001600160a01b03811661008e5760405162461bcd60e51b815260206004820152601560248201527f696e76616c6964206f776e657220616464726573730000000000000000000000604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0383161790556100b5858585856100c4565b50505050505050505050610216565b6100d162201480856101c7565b6002556100e181622014806101e9565b6100f3670de0b6b3a7640000856101e9565b6100fd91906101c7565b60015561010d62201480836101c7565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b600080600080600060a0868803121561018457600080fd5b855160208701516040880151606089015160808a0151939850919650945092506001600160a01b03811681146101b957600080fd5b809150509295509295909350565b6000826101e457634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561021157634e487b7160e01b600052601160045260246000fd5b500290565b610559806102256000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638da5cb5b116100715780638da5cb5b1461011d578063a385fb9614610148578063b816881614610152578063b9f9850a14610165578063f14039de1461016e578063fd2da3391461017757600080fd5b806315f24053146100ae5780632037f3e7146100d45780632191f92a146100e95780636e71e2d8146101015780638726bb8914610114575b600080fd5b6100c16100bc36600461043f565b610180565b6040519081526020015b60405180910390f35b6100e76100e236600461046b565b610197565b005b6100f1600181565b60405190151581526020016100cb565b6100c161010f36600461043f565b610216565b6100c160015481565b600054610130906001600160a01b031681565b6040516001600160a01b0390911681526020016100cb565b6100c16220148081565b6100c161016036600461046b565b610259565b6100c160035481565b6100c160025481565b6100c160045481565b600061018d8484846102d5565b90505b9392505050565b6000546001600160a01b031633146102045760405162461bcd60e51b815260206004820152602660248201527f6f6e6c7920746865206f776e6572206d61792063616c6c20746869732066756e60448201526531ba34b7b71760d11b606482015260840160405180910390fd5b61021084848484610397565b50505050565b60008260000361022857506000610190565b8161023384866104b3565b61023d91906104cb565b61024f670de0b6b3a7640000856104e2565b61018d9190610501565b60008061026e83670de0b6b3a76400006104cb565b9050600061027d8787876102d5565b90506000670de0b6b3a764000061029484846104e2565b61029e9190610501565b9050670de0b6b3a7640000816102b58a8a8a610216565b6102bf91906104e2565b6102c99190610501565b98975050505050505050565b6000806102e3858585610216565b9050600454811161032457600254670de0b6b3a76400006001548361030891906104e2565b6103129190610501565b61031c91906104b3565b915050610190565b6000600254670de0b6b3a764000060015460045461034291906104e2565b61034c9190610501565b61035691906104b3565b905060006004548303905081670de0b6b3a76400006003548361037991906104e2565b6103839190610501565b61038d91906104b3565b9350505050610190565b6103a46220148085610501565b6002556103b481622014806104e2565b6103c6670de0b6b3a7640000856104e2565b6103d09190610501565b6001556103e06220148083610501565b60038190556004829055600254600154604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b60008060006060848603121561045457600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561048157600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052601160045260246000fd5b600082198211156104c6576104c661049d565b500190565b6000828210156104dd576104dd61049d565b500390565b60008160001904831182151516156104fc576104fc61049d565b500290565b60008261051e57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122007d010deba7fe64eb6715c8b9df06a6025ea3429d04efb27bb2c0276bff69c4464736f6c634300080d0033a2646970667358221220470aadbedd72ebf747df2e9edac1b2ffedf408f8067f2e1ede8f06952079d9e964736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
